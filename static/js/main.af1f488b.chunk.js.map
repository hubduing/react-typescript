{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","href","TodoForm","props","ref","useRef","type","id","placeholder","onKeyPress","event","key","onAdd","current","value","htmlFor","TodoList","todos","onRemove","onToggle","map","todo","classes","completed","push","join","checked","onChange","title","onClick","App","useState","setTodos","newTodo","Date","now","prev","filter","elem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAEaA,EAAkC,WAC7C,OACE,8BACE,sBAAKC,UAAU,kCAAf,UACE,mBAAGC,KAAK,IAAID,UAAU,aAAtB,wBACA,qBAAIA,UAAU,6BAAd,UACE,6BAAI,mBAAGC,KAAK,IAAR,uEACJ,6BAAI,mBAAGA,KAAK,IAAR,kDCHDC,EAAmD,SAACC,GAE/D,IAAMC,EAAMC,iBAAyB,MAmBrC,OACE,sBAAKL,UAAU,kBAAf,UACE,uBAGAI,IAAKA,EACLE,KAAK,OACLC,GAAG,QACHC,YAAY,uHACZC,WArBoB,SAACC,GACL,UAAdA,EAAMC,MACRR,EAAMS,MAAMR,EAAIS,QAASC,OACzBV,EAAIS,QAASC,MAAQ,OAoBrB,uBAAOC,QAAQ,QAAQf,UAAU,SAAjC,sIC3BOgB,EAAoC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACnE,OACE,6BACGF,EAAMG,KAAI,SAAAC,GACT,IAAMC,EAAU,CAAC,QAKjB,OAJID,EAAKE,WACPD,EAAQE,KAAK,aAIb,oBAAIxB,UAAWsB,EAAQG,KAAK,KAA5B,SACE,kCACE,uBACAnB,KAAK,WACLoB,QAASL,EAAKE,UACdI,SAAU,kBAAMR,EAASE,EAAKd,OAI9B,+BAAOc,EAAKO,QACZ,mBAAG5B,UAAU,0BAA0B6B,QAAS,kBAAMX,EAASG,EAAKd,KAApE,wBAVmCc,EAAKd,UCiCvCuB,EA/CO,WACpB,MAA0BC,mBAAkB,IAA5C,mBAAOd,EAAP,KAAce,EAAd,KA8BA,OACE,qCACE,cAAC,EAAD,IACA,sBAAKhC,UAAU,YAAf,UACE,cAAC,EAAD,CAAUY,MAjCG,SAACgB,GAClB,IAAMK,EAAiB,CACrBL,MAAOA,EACPrB,GAAI2B,KAAKC,MACTZ,WAAW,GAIbS,GAAU,SAAAI,GACR,MAAM,CAAEH,GAAR,mBAAoBhB,UA0BlB,cAAC,EAAD,CACAA,MAAOA,EACPC,SAZgB,SAACX,GACrByB,GAAS,SAAAI,GAAI,OAAIA,EAAKC,QAAQ,SAAAC,GAAI,OAAIA,EAAK/B,KAAOA,SAY9CY,SAzBgB,SAACZ,GACrByB,GAAS,SAAAI,GAAI,OAAIA,EAAKhB,KAAI,SAAAC,GACxB,OAAIA,EAAKd,KAAOA,EACP,2BACFc,GADL,IAEEE,WAAYF,EAAKE,YAGdF,kBChBEkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.af1f488b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Navbar: React.FunctionComponent = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper green lighten-1 px1\">\r\n        <a href=\"/\" className=\"brand-logo\">React & TS</a>\r\n        <ul className=\"right hide-on-med-and-down\">\r\n          <li><a href=\"/\">Список дел</a></li>\r\n          <li><a href=\"/\">О нас</a></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","import React, {useRef} from \"react\";\r\n\r\ninterface TodoFormProps {\r\n  onAdd(title: string): void\r\n}\r\n\r\nexport const TodoForm: React.FunctionComponent<TodoFormProps> = (props) => {\r\n  // const [title, setTitle] = useState<string>('')\r\n  const ref = useRef<HTMLInputElement>(null)\r\n\r\n  // const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   setTitle(event.target.value)\r\n  // }\r\n\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key === 'Enter') {\r\n      props.onAdd(ref.current!.value) \r\n      ref.current!.value = ''\r\n      // \\! означает что typescript будет игнорить ошибку\r\n\r\n\r\n      // console.log(title)\r\n      // setTitle('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"input-field mt2\">\r\n      <input \r\n      // onChange={changeHandler}\r\n      // value={title} \r\n      ref={ref}\r\n      type=\"text\" \r\n      id=\"title\" \r\n      placeholder=\"Введите название дела\" \r\n      onKeyPress={keyPressHandler}\r\n      />\r\n      <label htmlFor=\"title\" className=\"active\" >Введите название дела</label>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { ITodo } from \"./interfaces\";\r\n\r\ntype TodoListProps ={\r\n  todos: ITodo[]\r\n  onToggle(id: number): void\r\n  onRemove(id: number): void\r\n  // 2 метод: \r\n  // onRemove: (id: number) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({ todos, onRemove, onToggle }) => {\r\n  return (\r\n    <ul>\r\n      {todos.map(todo => {\r\n        const classes = ['todo']\r\n        if (todo.completed) {\r\n          classes.push('completed')\r\n        }\r\n\r\n        return (\r\n          <li className={classes.join(' ')} key={todo.id}>\r\n            <label>\r\n              <input \r\n              type=\"checkbox\" \r\n              checked={todo.completed} \r\n              onChange={() => onToggle(todo.id)}\r\n              />\r\n              {/* onChange={onToggle.bind(null, todo.id)} */}\r\n              {/* onChange={() => onToggle(todo.id)} */}\r\n              <span>{todo.title}</span>\r\n              <i className=\"material-icons red-text\" onClick={() => onRemove(todo.id)}>delete</i>\r\n            </label>\r\n          </li>\r\n        )\r\n      })}\r\n      \r\n    </ul>\r\n  )\r\n}","import React, {useState} from 'react';\r\nimport { ITodo } from './components/interfaces';\r\nimport { Navbar } from './components/Navbar';\r\nimport { TodoForm } from './components/TodoForm';\r\nimport {TodoList} from './components/TodoList'\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const [todos, setTodos] = useState<ITodo[]>([])\r\n  const addHandler = (title: string) => {\r\n    const newTodo: ITodo = {\r\n      title: title,\r\n      id: Date.now(),\r\n      completed: false\r\n\r\n    }\r\n    // setTodos([newTodo, ...todos])\r\n    setTodos( prev => {\r\n      return [newTodo, ...todos]\r\n    })\r\n  }\r\n\r\n  const toggleHandler = (id: number) => {\r\n    setTodos(prev => prev.map(todo => {\r\n      if (todo.id === id) {\r\n        return {\r\n          ...todo, \r\n          completed: !todo.completed\r\n        }\r\n      }\r\n      return todo\r\n    })\r\n    )\r\n  }\r\n  const removeHandler = (id: number) => {\r\n    setTodos(prev => prev.filter( elem => elem.id !== id ))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar/>\r\n      <div className=\"container\">\r\n        <TodoForm onAdd={addHandler}/>\r\n        \r\n        <TodoList \r\n        todos={todos} \r\n        onRemove={removeHandler} \r\n        onToggle={toggleHandler} \r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}